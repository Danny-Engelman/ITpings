/* ITpings is available on GitHub: https://github.com/Danny-Engelman/ITpings */
/** @license MIT
 * This Dashboard uses hardcoded Databases references
 * If you make changes in the Database Schema, be sure to check those new names in this Dashboard source code
 * */
!function(e, t, r, i = "") {
    function a(e, t = g, r = c) {
        return e = m(e), t === u ? (t => e.toLocaleDateString(r, t))(_) : t === h ? e.getHours() + ":" + e.getMinutes() : t === g ? a(e, u) + " " + f(e) : void 0;
    }
    if (!e.customElements) return void e.setTimeout(function() {
        t.body.innerHTML = "<h1>This Browser does not support <a href=https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements>W3C customElements</a> yet<br>Use Chrome, or FireFox (may 2018)</h1>";
    }, 1e3);
    let s, o, n = "#99e6ff,#33ccff,#0099cc".split`,`, l = {
        ID: "_pingid",
        dev_id: "dev_id",
        created: "created",
        modulation: "modulation",
        data_rate: "data_rate",
        coding_rate: "coding_rate",
        ITpings_devid: "_devid",
        ITpings_result: "result",
        ITpings_cached: "cached",
        ITpings_time: "time",
        sensor: "sensor",
        Attr_title: "title",
        Attr_query: "query",
        Attr_interval: "interval",
        Attr_refresh: "pulse",
        Attr_nocache: "nocache",
        MINUTE: "MINUTE",
        HOUR: "HOUR",
        DAY: "DAY",
        WEEK: "WEEK",
        MONTH: "MONTH",
        YEAR: "YEAR",
        THEAD: "THEAD",
        TABLE: "TABLE",
        TBODY: "TBODY"
    }, d = e => Math.floor((new Date(e).getTime() - new Date().getTime()) / 86400), c = navigator.language, h = "H:mm", u = "D MMM", g = "D MMM H:mm", _ = {
        month: "short",
        day: "numeric"
    }, p = {
        hour: "2-digit",
        minute: "2-digit",
        hour12: !1
    }, m = (e = "") => I(e) ? new Date(e) : e, f = (e, t = p, r = c) => m(e).toLocaleTimeString(r, t), C = "PingID", v = "IDs", A = "frequency,snr,rssi,channel".split`,`, D = " QueryManager can't register", T = "register WC for pollServer event", b = (e, t = "lightcoral", r = "", i = "", a = "", s = "", o = "", n = "", l = "", d = "") => {
        console.log(`%c ${e} `, "background:" + t, r, i, a, s, o, n, l, d);
    }, y = function() {
        let e = Array.from(arguments), t = e.shift();
        t = t.split`.`;
        let r = ";color:white;" + (t[1] ? "background:" + t[1] : "background:green");
        b("ITpings %c " + t[0], "lightgreen;padding:0 .5em", r, ...e);
    };
    [ "DOMContentLoaded", "hashchange", "load", "click", "focus", "blur" ].map(t => e.addEventListener(t, () => y("Event: " + t, event ? event.target : "")));
    let I = e => "string" == typeof e, E = e => new Map(e), S = e => new Set(e), w = e => t.getElementById(e), L = (e, r = t) => [ ...r.querySelectorAll(e) ], R = (e, t) => e.getAttribute(t), N = (e, t, r) => e.setAttribute(t, r), H = e => t.createElement(e), O = (e, t = H("DIV")) => (e && (t.innerHTML = e), 
    t), M = (e, t, r = O(e)) => (r.classList.add(t), r), k = (e, t = i) => e && (e.innerHTML = t, 
    e), x = (e, t) => e.appendChild(t), $ = e => t.importNode(w(e).content, !0), q = e => e.style.display = "none", B = (e, t = "block") => e.style.display = t, P = (e, t) => e.classList.add(t), W = (e, t) => e.classList.toggle(t), V = e => Object.keys(e), J = (e, t = "none") => e.style.display = t, Y = (e, t = !1, i = r.getItem(e)) => i || t, U = (e, t) => {
        try {
            return I(t) || (t = JSON.stringify(t)), y("localstorageSet.orangered", "store", t.length, "bytes as:", e), 
            r.setItem(e, t);
        } catch (e) {
            console.error(e);
        }
    };
    !function(r = "$_ready", i = e) {
        function a() {
            if (!n) {
                n = !0;
                for (let t = 0; t < o.length; t++) o[t].fn.call(e, o[t].ctx);
                o = [];
            }
        }
        function s() {
            "complete" === t.readyState && a();
        }
        let o = [], n = !1, l = !1;
        i[r] = function(r, i) {
            if ("function" != typeof r) throw new TypeError("callback for docReady(fn) must be a function");
            n ? setTimeout(function() {
                r(i);
            }, 1) : (o.push({
                fn: r,
                ctx: i
            }), "complete" === t.readyState || !t.attachEvent && "interactive" === t.readyState ? setTimeout(a, 1) : l || (t.addEventListener ? (t.addEventListener("DOMContentLoaded", a, !1), 
            e.addEventListener("load", a, !1)) : (t.attachEvent("onreadystatechange", s), e.attachEvent("onload", a)), 
            l = !0));
        };
    }();
    let F, K = (e, t = !1) => {
        function r() {
            y("Fetch API.firebrick", ...arguments);
        }
        let i = e.replace(X(""), ""), a = e.includes("query=" + C);
        return a || r("Fetching from ", t ? "Cache:" + t : "Server", t ? "" : "\n" + encodeURI(e)), 
        new Promise((a, s) => {
            if (t) {
                let e = JSON.parse(Y(t, "{}"));
                j(e) ? (r("Using ", e.result.length, " results cached data for:", t), e[l.ITpings_cached] = new Date(), 
                a(e)) : (r("No cache data for:", t), t = !1);
            }
            t || fetch(e).then(t => t.ok ? t.json() : (b("$_fetch error " + t.status + " " + t.statusText, "red;color:white", e, t), 
            t)).then(e => {
                j(e) ? r("Fetched (" + i + ")", e.result.length, "rows , ", JSON.stringify(e).length, "bytes") : (e => "number" == typeof e)(e) && (w("heartbeat_ping").innerHTML = G(e)), 
                a(e);
            }).catch(e => s(b(e, "red;color:yellow", i)));
        });
    }, j = e => e && e.hasOwnProperty(l.ITpings_result), Q = e => e && e.hasOwnProperty(l.ITpings_cached), z = e => e && e[l.ITpings_result], G = e => `<A target=_blank HREF=ITpings_connector.php?query=ping&_pingid=${e}>${e}</A><A target=_blank HREF=ITpings_connector.php?query=DeletePingID&_pingid=${e}> X </A>`, X = e => {
        let t = location.href.split("#")[0];
        return t = t.split`/`, t.pop(), t.push("ITpings_connector.php?query=" + e), t = t.join`/`, 
        t;
    }, Z = (e, t = "Loading: ", r = i) => `<DIV class="loading">${t} ${e} ${r}</DIV>`, ee = r => {
        let i;
        F = r, b("Change Heartbeat:", "orange;color:black", F), k(w("heartbeat"), F), (e => void 0 !== e)(s) ? (e.clearInterval(i), 
        i = e.setInterval(() => {
            t.getElementById("heartbeat_heart").classList.toggle("heartbeating"), k(w("heartbeat_time"), a(new Date())), 
            s.pollServer(C);
        }, F)) : console.error("No __QueryManager");
    };
    class te {
        static _log() {
            y("QueryManager.purple", ...arguments);
        }
        constructor(e = this) {
            e.maxid = 0, e[l.Attr_refresh] = E();
        }
        register_for_pollServer(e) {
            let t, r, i, a, s;
            i = R(e, l.Attr_refresh), i ? [t, r] = i.split`:` : (t = e.query || R(e, l.Attr_query), 
            r = e.idfield || l.ID), t || console.error(D, e), a = this[l.Attr_refresh], a.has(t) || a.set(t, E()), 
            s = a.get(t), s.has(r) || s.set(r, S()), s.get(r).add(e), te._log(T, "datasrc:" + t, "idfield:" + r, a.get(t));
        }
        pollServer(e) {
            let t = this, r = e => {
                this[l.Attr_refresh].forEach((t, r) => {
                    t.forEach((t, i) => {
                        t.forEach(t => {
                            let i = e.maxids.pings._pingid;
                            te._log(r + ".pollServer(" + i + ")"), t.pollServer(i);
                        });
                    });
                });
            };
            K(X(e)).then(i => {
                e === C ? i > t.maxid && (t.maxid = i, t.pollServer(v)) : (te._log("heartbeat:" + F, "Got recent ID values from Database. _pingid=", i.maxids.pings._pingid, i), 
                r(i));
            }).catch(e => console.error(e));
        }
    }
    let re, ie = (e, t = 9999) => {
        !e.hasAttribute([ l.Attr_nocache ]) && e.rows && e.rows.length > 0 && (function() {
            y("WebComponent.dodgerblue", ...arguments);
        }("$WC_saveCachedData_To_localstorage: Save", e.rows.length, "rows as key:" + e._WebComponent_ID), 
        U(e._WebComponent_ID, {
            [l.ITpings_result]: e.rows.slice(0, t + 1)
        }));
    };
    !function(r = "itpings-table") {
        e.customElements.define(r, class extends HTMLElement {
            _log() {
                b(r + ":" + (this._WebComponent_ID || "INIT"), n[0], ...arguments);
            }
            static get observedAttributes() {
                let e = [ l.Attr_query ];
                return e;
            }
            get title() {
                return R(this, l.Attr_title);
            }
            set title(e) {
                N(this, l.Attr_title, e);
            }
            constructor() {
                super();
                let e = this;
                e._WebComponent_ID = R(e, l.Attr_query), this._log("CustomElement constructor", e), 
                e.maxid = 1, e.rows = [];
            }
            setTitle(e = i) {
                this.idle || (e = Z(e)), e === i && (e = this[l.Attr_title] || this[l.Attr_query]), 
                k(this.CAPTION, e);
            }
            fetchTableData(e = i, r = !1) {
                let a = this;
                a.requiredColumns = S(), this.setTitle();
                let o = e => {
                    e.length > 1 && e[0][a.idfield] < e[1][a.idfield] && (e = e.reverse()), a.rows = [ ...e, ...a.rows ];
                }, n = (e, t = l.THEAD, r) => {
                    let i, s, o = t !== l.THEAD, n = (o ? a.TBODY : a.THEAD).insertRow(t);
                    return V(e).map(t => {
                        i = o ? e[t] : t, s = n.insertCell(), N(n, "data-" + t, i), a.hasCachedData && N(n, "data-cached", "true"), 
                        N(s, "data-column", t), N(s, "data-" + t, i), P(s, (d(e[l.ITpings_time]) > 1 ? "Historic" : "New") + "Cell");
                        let r = (e, r) => {
                            o && t === e && i !== r && a.requiredColumns.add(t);
                        };
                        return r(l.modulation, "LORA"), r(l.coding_rate, "4/5"), r(l.data_rate, "SF7BW125"), 
                        o && "LastSeen" === t && (i = d(i)), o && t === l.dev_id && (i = `<SPAN data-column="${t}" data-${t}="${i}">${i}</SPAN>`), 
                        o && t === a.idfield && (~~i > a.maxid && (a.maxid = ~~i), (t = l.ID) && (i = G(i)), 
                        l.ID), k(s, i), {
                            name: t,
                            value: i,
                            TR: n,
                            TD: s
                        };
                    });
                };
                this._log("fetchTableData", r ? "cache:" + r : "from Server"), a.idle && (a.idle = !1, 
                K(a.uri + e, r).then(e => {
                    a.hasCachedData = Q(e);
                    let i = z(e);
                    try {
                        if (i) {
                            let e, t, d;
                            !1 === r && a.hasCachedData && this._log("add ", i.length, "new rows from Database", i && i[0]), 
                            this.setTitle(a[l.Attr_title] + "; processing data"), a.idfield || 0 !== i.length ? (a.idfield ? i.length ? (a.TBODY = ((e, t, r) => e.insertBefore(t, r))(a.TABLE, x(a.TABLE, H(l.TBODY)), a.TBODY), 
                            P(a.TBODY, "newPing"), d = i.map(n), this._log(a.query, d.length, "rows added to table"), 
                            o(i)) : console.warn("empty result set from:", a.uri) : ([e] = i, [t] = V(e), "_" !== t[0] && console.error(t, "might not be a correct Key fieldname return from DBInfo endpoint"), 
                            a.idfield = t, n(e), a.columns = S(i.forEach(n)), o(i), k(a), x(a, a.WRAPDIV), s.register_for_pollServer(a)), 
                            ie(a, 100), a.idle = !0, this.setTitle(a[l.Attr_title] || a[l.Attr_query])) : (k(a, `<div class='nodata'>No data: ${R(a, l.Attr_query)}</div>`), 
                            a.idle = !0);
                        } else console.error(e), msg = e.statusText, 500 === e.status && (msg = e.url + "Script exceeded PHP execution time, make the query faster or reduce the amount of data in the MySQL database"), 
                        x(a, M(`${e.status} ${msg}`, "itpings-table-error"));
                    } catch (e) {
                        console.error(e);
                    }
                    a.requiredColumns.forEach(e => ((e, r, i = t.body) => i.style.setProperty(e, "table-cell"))("--CSSdisplay_" + e, 0, a.TABLE)), 
                    Q(e) && (this._log("Cached end", a.maxid), a.hasCachedData = !1);
                }).catch(e => {
                    console.error(e);
                }));
            }
            pollServer(e) {
                let t = this.maxid, i = this.idfield;
                e > t && (this._log("pollServer from element:", r, ", idfield:" + i, ", maxid:" + t, ", _pingid:" + e), 
                this.fetchTableData("&filter=" + i + " gt " + t + "&limit=" + (e - t)));
            }
            attributeChangedCallback(e, t, r) {
                let a = this, s = a.isConnected;
                if (e === l.Attr_query) {
                    a.uri = X(r), this._log("CustomElement attributeChanged:", ", attr:" + e, ", oldValue:" + t, ", newValue" + r, s ? i : "►► NOT", "Connected"), 
                    a.idfield = !1, a.idle = !0, a.WRAPDIV && a.WRAPDIV.parentNode.removeChild(a.WRAPDIV);
                    let o = a.WRAPDIV = M(i, "table-wrapper");
                    a.HEADER = x(o, H(l.TABLE)), P(a.HEADER, "sticky-header"), a.CAPTION = x(a.HEADER, H("CAPTION")), 
                    P(a.CAPTION, "itpings-div-title");
                    let n = a[l.Attr_title] || a[l.Attr_query];
                    k(a.CAPTION, n), k(a, Z(n)), a.THEAD = x(a.HEADER, H(l.THEAD)), a.TABLE = x(o, H(l.TABLE)), 
                    P(a.TABLE, "data-table"), a.TBODY = x(a.TABLE, H(l.TBODY));
                    let d = !a.hasAttribute([ l.Attr_nocache ]) && a._WebComponent_ID;
                    this.fetchTableData(i, d);
                }
            }
            connectedCallback() {
                this._log("CustomeElement connectedCallback");
            }
        });
    }(), function(t = "itpings-chart") {
        let r = E(), o = (e, t, i, a, s) => r.set(e, {
            interval: t,
            maxrows: i,
            unit: a,
            xformat: s
        });
        o("5m", 5, 20, l.MINUTE, h), o("30m", 30, 60, l.MINUTE, h), o("1H", 1, 120, l.HOUR, h), 
        o("2H", 2, 240, l.HOUR, h), o("6H", 6, 380, l.HOUR, h), o("1D", 1, 380, l.DAY, h), 
        o("2D", 2, 380, l.DAY, g), o("7D", 7, 380, l.DAY, g), o("2W", 2, 500, l.WEEK, g), 
        o("1M", 1, 4e3, l.MONTH, u), o("6M", 6, 1e3, l.MONTH, u), e.customElements.define(t, class extends HTMLElement {
            _log() {
                b(t + ":" + (this._WebComponent_ID || "INIT"), n[1], ...arguments);
            }
            static get observedAttributes() {
                let e = [ l.sensor, l.Attr_interval ];
                return e;
            }
            get title() {
                return R(this, l.Attr_title);
            }
            set title(e) {
                N(this, l.Attr_title, e);
            }
            get sensor() {
                return R(this, l.sensor);
            }
            set sensor(e) {
                N(this, l.sensor, e);
            }
            get interval() {
                return R(this, l.Attr_interval);
            }
            set interval(e) {
                N(this, l.Attr_interval, e), this._log(this.isConnected ? "Connected" : "Not Connected", "(setter) ►►►", l.Attr_interval, ": (" + typeof e + ")", e), 
                event && event.type;
                let t = this, a = t.INTERVALS.querySelector(`[id="${e}"]`), s = t.sensor, o = t.__INTERVAL = r.has(t.interval) ? r.get(t.interval) : "6H";
                t.idle = !1, ((e, t, r) => e.map(e => e.classList[e === t ? "add" : "remove"]("selectedInterval")))([ ...this.INTERVALS.children ], a), 
                A.includes(s) ? (t.query = "PingedDevices", t.uri = X(t.query), t.value_field_name = s, 
                t.deviceid_field_name = l.dev_id) : [ "Temperature" ].includes(s) ? (t.query = s, 
                t.uri = X(s), t.value_field_name = "value", t.deviceid_field_name = l.ITpings_devid) : (t.query = "SensorValues", 
                t.uri = X(`${t.query}&sensorname=${s}`), t.value_field_name = "sensorvalue", t.deviceid_field_name = l.dev_id), 
                t.uri += `&orderby=created&interval=${o.interval}`, t.uri += `&intervalunit=${o.unit}&limit=none&maxrows=${o.maxrows}`, 
                t._WebComponent_ID = (t.title || t.query) + "_" + e, U(t.localStorageKey, e), this.fetchChartData(i, t._WebComponent_ID);
            }
            initChartJS() {
                let e = this;
                e.ChartJS_Lines = [], this._log(e.ChartJS ? "Chart.js.destroy()" : "new ChartJS()"), 
                e.ChartJS && e.ChartJS.destroy(), e.ChartJS = new Chart(e.CANVAS, {
                    "type": "line",
                    "data": {
                        "labels": [],
                        "datasets": []
                    },
                    "options": {
                        "maintainAspectRatio": !1,
                        "title": {
                            "display": !1,
                            "text": i
                        },
                        "tooltips": {
                            "mode": "index",
                            "intersect": !1
                        },
                        "hover": {
                            "mode": "nearest",
                            "intersect": !0
                        },
                        "legend": !1,
                        "showLines": !0,
                        "elements": {
                            "line": {
                                "tension": 0
                            }
                        }
                    }
                });
            }
            drawChartJS(e = !1) {
                let t = this;
                (e || t.rows).forEach(e => {
                    let r = t.ChartJS.data.datasets, i = t.ChartJS.data.labels, s = a(e[l.created], t.__INTERVAL.xformat);
                    if (!i.includes(s)) {
                        let a = e[t.deviceid_field_name], o = t.ChartJS_Lines.indexOf(a);
                        if (o < 0) {
                            o = r.length;
                            let e = re.getColor(a);
                            console.log(`%c newDevice: (${t.deviceid_field_name}) = ${a}  `, "color:white;background:" + e), 
                            r.push({
                                "label": a,
                                "fill": !1,
                                "backgroundColor": e,
                                "borderColor": e,
                                "data": []
                            }), t.ChartJS_Lines.push(a);
                        }
                        i.push(s), r[o].data.push({
                            "x": s,
                            "y": e[t.value_field_name]
                        });
                    }
                }), t.ChartJS.update();
            }
            setTitle(e = i) {
                e = (this.title || this.query) + e, this.idle || (e = Z(e)), k(this.CAPTION, e);
            }
            fetchChartData(e = i, t = !1) {
                let r = this;
                r.idle = !1, this.setTitle("; retrieving new Database values"), J(r.INTERVALS), 
                K(r.uri + e, t).then(t => {
                    let i = z(t);
                    try {
                        let a = e => (e => e && e.slice(-1)[0])(e)[r.idfield];
                        this._log(" has", r.rows.length, "rows, now got", i.length, r.hasCachedData ? "Cached!" : "New", "rows", e ? "from filter:" + e : ""), 
                        r.hasCachedData && a(i) === a(r.rows) ? (this._log("new data is same as cached data!"), 
                        r.hasCachedData = !1, r.idle = !0, this.setTitle()) : (this.setTitle("; processing data"), 
                        0 === r.rows.length && (s.register_for_pollServer(r), this.initChartJS()), r.hasCachedData = Q(t), 
                        null !== i[0] && (i.map(e => {
                            r[l.ID] = e[l.ID], r.rows.push(e);
                        }), this.drawChartJS(!r.hasCachedData && i)), r.idle = !0, J(r.INTERVALS, "initial"), 
                        this.setTitle(), r.hasCachedData ? (this._log("hasCachedData", e), this.fetchChartData(e, !1)) : (this._log("NO hasCachedData", e), 
                        ie(r)), r.hasCachedData = !1);
                    } catch (e) {
                        console.error("fetchChartData", e);
                    }
                });
            }
            pollServer(e) {
                let t = ~~this[l.ID];
                this._log("pingID:", e, "current_ping_id", this[l.ID], this.idle ? "idle" : "waiting for data"), 
                t && this.idle ? t < e && (this._log("pollServer Chart JS current_ping_id:", t, "new:", e), 
                this.fetchChartData(`&filter=${l.ID}%20gt%20${t}`)) : this._log("►►► No pingid on Chart JS yet (not drawn yet) ◄◄◄");
            }
            constructor() {
                super(), this.rows = [];
            }
            attributeChangedCallback(e, t, r) {
                let a = this.isConnected;
                switch (e) {
                  case l.Attr_interval:
                    a && this._log("CustomElement attributeChanged:", ", attr:" + e, ", oldValue:" + t, ", newValue" + r, a ? i : "►► NOT", "Connected");
                }
            }
            connectedCallback() {
                let e = this, t = e.sensor;
                e.localStorageKey = t + "_interval", this._log("CustomeElement connectedCallback");
                let a = M("\x3c!-- DIV created in connectedCallback --\x3e", "chart-wrapper"), s = e => x(a, e);
                e.CAPTION = s(M(t, "itpings-div-title")), e.INTERVALS = [ ...r.keys() ].reduce((t, r) => {
                    let i = x(t, ((e, t, r = O(e)) => (N(r, "id", t), r))(r, r));
                    return i.addEventListener("click", () => e.interval = r), t;
                }, s(M(i, "chart_interval"))), e.CANVAS = s(H("CANVAS")), x(e, a), e.interval = Y(e.localStorageKey, "6H");
            }
            disconnectedCallback() {
                this._log("disconnected", this.isConnected ? "connected" : "NOT connected");
            }
        });
    }(), function(t = "itpings-json") {
        e.customElements.define(t, class extends HTMLElement {
            _log() {
                b(t + ":" + (this._WebComponent_ID || "INIT"), n[2], ...arguments);
            }
            static get observedAttributes() {
                let e = [ l.sensor, l.Attr_interval ];
                return e;
            }
            constructor() {
                super();
            }
            attributeChangedCallback(e, t, r) {
                switch (this.isConnected, e) {
                  case l.Attr_interval:
                }
            }
            connectedCallback() {}
            disconnectedCallback() {
                this._log("disconnected", this.isConnected ? "connected" : "NOT connected");
            }
        });
    }();
    class ae {
        static _log() {
            y("Router.teal", ...arguments);
        }
        static routeId(e) {
            return "article_" + ("" === e ? "dashboard" : e);
        }
        static toggleIcon(e) {
            W(e.icon_element, "sidebar_icon_selected");
        }
        constructor(t) {
            return this.preload = [], this.routerConfig = t, this.routes = new Map(), this.previousRoute = !1, 
            this.currentRoute = !1, ae._log("Init Router"), L(".sidebar_icon a").map(this.initRoute.bind(this)), 
            [ "hashchange" ].map(t => e.addEventListener(t, () => {
                ae._log("event:", t, this.currentRoute, this), this.goRoute();
            })), this;
        }
        goRoute(e = ae.routeId(location.hash.slice(1))) {
            ae._log("goRoute:", e), this.routes.has(e) && ([this.previousRoute, this.currentRoute] = [ this.currentRoute, this.routes.get(e) ], 
            this.currentRoute.load().show(), this.previousRoute && this.previousRoute.hide());
        }
        initRoute(t) {
            let r = ae.routeId(t.href.split("#")[1]), i = w("placeholder_" + r), a = () => e.setTimeout(void 0, 1);
            q(i), this.routes.set(r, {
                route: r,
                icon_element: t,
                placeholder_element: i,
                load() {
                    let e = this.placeholder_element;
                    return e.childElementCount < 1 && e.appendChild($(this.route)), this;
                },
                show() {
                    return ae.toggleIcon(this), B(this.placeholder_element, "grid"), a(), this;
                },
                hide() {
                    return ae.toggleIcon(this), q(this.placeholder_element), a(), this;
                }
            });
            let s = this.routerConfig.preload || i.getAttribute("preload");
            s && this.preload.push(this.routes.get(r));
        }
        preloadAll() {
            ae._log("preloadAll", this.preload), this.preload.map(e => e.load.call(e));
        }
    }
    s = new te(), re = new class {
        static _log() {
            b("Router", ...arguments);
        }
        constructor(e, r = this) {
            r.STYLE = [ ...t.styleSheets ].find(t => t.ownerNode.id === e), r.devicesMap = E(), 
            r.deviceColor = E(), r.colors = (e => e.split`,`)("#e6194b,#0082c8,#f58231,#911eb4,#46f0f0,#f032e6,#d2f53c,#fabebe,#008080,#e6beff,#aa6e28,#fffac8,#800000,#aaffc3,#808000,#ffd8b1,#000080,#808080,#ffe119");
        }
        loadColors_from_localStorage() {
            U("StyleColors", this.deviceColor);
        }
        saveColors_to_localStorage() {
            Y("StyleColors");
        }
        addDevice(e) {
            let t = e[l.ITpings_devid], r = e[l.dev_id];
            this.devicesMap.set(t, r);
            let i = this.getColor(r);
            console.log("%c DeviceColor: " + t + " = " + r, "background:" + i + ";color:white");
        }
        getColor(e) {
            let t;
            return parseInt(e) && (e = this.devicesMap.get(e)), this.deviceColor.has(e) ? t = this.deviceColor.get(e) : (t = this.colors.shift(), 
            this.deviceColor.set(e, t), this.STYLE.insertRule(`span[data-${l.dev_id}='${e}']::before{background:${t}}`, 0)), 
            t;
        }
    }("DynamicDeviceColors"), K(X("ApplicationDevices")).then(t => {
        z(t).map(e => {
            re.addDevice(e);
        }), ee(500), e.addEventListener("focus", () => ee(500)), e.addEventListener("blur", () => ee(18e5)), 
        e.$_ready(() => {
            o = new ae({
                "preload": !0
            }), o.preloadAll(), o.goRoute();
        });
    });
}(window, document.currentScript.ownerDocument, localStorage);